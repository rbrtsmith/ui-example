/*------------------------------------*\
    $MAKE-FRACTIONS
\*------------------------------------*/
/**
 * 1. Takes 4 arguments:
 *    - The property (Width OR push OR pull),
 *    - The fractions list that corresponds to the property,
 *    - The breakpoint (can be an item in the `$breakpoints` list or null).
 * 2. Loop through all of the fractions
 * 3. If the property within the current fraction has been set feature-toggled
 * 4. If a breakpoint was passed into the mixin...
 * 5. Generate a class name based on:
 *    - The utility namespace +
 *    - The passed in (optional) namespace +
 *    - The namespace in the current fraction +
 *    - An escaped @ symbol as a responsive suffix +
 *    - The namespace from the current breakpoint item.
 * 6. Generate the property and the value, which is the fraction e.g. 1/3 
 *    converted into a percentage.
 * 7. A breakpoint was not passed into the mixin...
 * 8. Generate the same as above but without any responsive suffixes.
 */
@mixin make-fractions($property, $fractions, $breakpoint) { /* [1] */    
    @each $fraction in $fractions { /* [2] */
        @if nth($fraction, 3) { /* [3] */
            @if $breakpoint { /* [4] */
                .#{nth($fraction, 1)}\@#{nth($breakpoint, 1)} { /* [5] */
                    #{$property}: nth($fraction, 2) * 100%; /* [6] */
                }
            } @else { /* [7] */
                .#{nth($fraction, 1)} { /* [8] */
                    #{$property}: nth($fraction, 2) * 100%;
                }
            }
        }
    }
}