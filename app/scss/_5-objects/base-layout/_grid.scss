/*------------------------------------*\
    $RWSMITH GRID
\*------------------------------------*/
/**
 * CONTENTS
 * INTRO................How the system works with examples
 * VARS.................Default settings
 * FEATURE-TOGGLE.......Toggle specific grid features
 * MIXINS...............Used for generating width, push & pull classes.
 * GRID-INITIALISE......Build the grid architecture
 */





/*------------------------------------*\
    $INRO
\*------------------------------------*/
/**
 * This grid system is designed to be as minimal as possible, using only width,
 * push and pull classes that you actually intend to use via the feature-toggle 
 * section below.
 * The grid settings are located in the $VARS section below.
 *
 * NOTE: This grid system uses responsive suffixes on top of the modified 
 * version of the BEM naming convention.
 * Further reading on BEM
 * http://bit.ly/1dM4LGz
 *
 * Responsive suffixes:
 * http://bit.ly/1kT29fI
 *
 * Please note: - The prefixes `o-` and `u-` are default values, and can be
 * changed.  The namespace following the responsive suffixes `@` are also
 * defaults that can be changed.
 * 
 * You can initialise a grid with the class of `o-grid`
 *
    <div class="o-grid">
 *
 * This grid system can accept a number of modifier flags which can be activated
 * or deactivated via the feature toggle.  
 * Example:
 *
    <div class="o-grid o-grid--no-gutter">
 *
 * Within the grid you can nest grid items.
 *
    <div class="o-grid">
        <div class="o-grid__item">
 *
 * These items can than be manipulated with width, push or pull classes.
 * 
  <div class="o-grid__item u-1/2">
 *
 * Using responsive suffixes widths, push and pull can be applied for specific
 * breakpoints.
  `class="o-grid__item u-1/2@sm-up u-1/3@md-up"`
 *
 * Push and pull classes can be used to shift the grid item's positioning along
 * the X axis.  They can also be used with responsive suffixes and combined
 * with width classes, which gives an enormous variety of possible combinations.
 * Example:
 *
  `class="o-grid__item u-2/3@sm-up u-push-1/3@md-up"`
 *
 * This grid system is infinitely nestable.
 *
 * DEMO
 * http://codepen.io/rbrtsmith/full/VvdGMp/
 */






/*------------------------------------*\
    $VARS
\*------------------------------------*/

/**
 * Amount of space between grid items
 */
$grid-gutter-width: 1rem !default;

/**
 * Large and small gutters, must be toggled to false under `FEATURE-TOGGLE`.
 * Can be activated on a grid with the modifier flag
 *
  <div class="grid grid--gutter-sm">
 */
$gutter-lg-width: $grid-gutter-width * 2 !default;
$gutter-sm-width: $grid-gutter-width / 2 !default;

/**
 * In order to remove unwanted whitespace between grid items due to inline-blocks 
 * the font-size of the grid is set to zero, then on the grid items themselves
 * the font-size will be given the value below - which should be equal to your
 * projects default font size.
 * Any headlines that are descendants of the `grid__item` will inherit their 
 * respective set font-sizes.
 */
$grid-font-size: 1rem !default;




/*------------------------------------*\
    $FEATURE-TOGGLE
\*------------------------------------*/
/**
 * Set values to true to have Sass compile it into your resulting stylesheet.
 * Set features that you are not using to keep bloat down to a minimum!
 */
$use-grid:               true !default;

/** GRID FLAGS */
$use-grid--equal-height: true !default;
$use-grid--center:       true !default;
$use-grid--bottom:       true !default;

$use-grid--gutter-lg:    true !default;
$use-grid--gutter-sm:    true !default;
$use-grid--no-gutter:    true !default;
$use-grid--matrix:       true !default;

$use-grid--reverse:      true !default;





/**
 * NOTICE..............
 *
 * You should refrain from modifying anything beyond this point,
 * Doing so will likely break the grid system.
 *
 */




/*------------------------------------*\
    $MIXINS
\*------------------------------------*/








@if $use-grid {

/*------------------------------------*\
    $GRID-INITIALISE
\*------------------------------------*/
/**
 * 1. Ensure grid spans full width of parent.
 * 2. Reset any margins and paddings.
 * 3. Set a negative margin-left & right to create space for 
 *    `grid__item`s gutter.
 * 4. Set a zero font-size to remove spacing on the `grid__item` children
 *    caused by them having their display set to `inline-block`.
 * 5. Remove any possible list styling.
 */
.o-grid {
    min-width: 100%; /* [1] */
    margin: 0; /* [2] */
    padding: 0; /* [2] */
    margin-left: -$grid-gutter-width; /* [3] */
    font-size: 0; /* [4] */
    list-style: none; /* [5] */
}

/**
 * Large gutters
 */
@if $use-grid--gutter-lg {
    .o-grid--gutter-lg {
        margin-left: -$gutter-lg-width;            
    }

    .o-grid--gutter-lg > .o-grid__item {
        padding-left: $gutter-lg-width;
    }
}
    
/**
 * Small gutters
 */
@if $use-grid--gutter-sm {
    .o-grid--gutter-sm {
        margin-left: -$gutter-sm-width;            
    }

    .o-grid--gutter-sm > .o-grid__item {
        padding-left: $gutter-sm-width;
    }
}

/**
 * Zero width gutters
 */
@if $use-grid--no-gutter {
    .o-grid--no-gutter {
        margin-left: 0;            
    }

    .o-grid--no-gutter > .o-grid__item {
        padding-left: 0;
    }
}

/**
 * 1. Give grid items equal heights using flexbox.  
 *    Works for IE10+  IE9 will fallback to the default grid.
 * 2. Fix for IE10 which requires children of flexbox-items to have a
 *    maximum width of 100%.
 */
@if $use-grid--equal-height { /* 1 */
    .o-grid--equal-height,
    .o-grid--equal-height > .o-grid__item,
    .o-grid--equal-height--centered-content > .o-grid__item > * {
        display: -webkit-box;
        display: -webkit-flex;
        display: flex;
        display: -ms-flexbox;
        
        > * { /** [2] */
            width: 100%;
        }
    }
    /**
     * Allow equal height items to wrap, just as standard grid items do, when
     * a combined width of the grid-items is > 100%.
     */
    .o-grid--equal-height {
        -webkit-flex-wrap: wrap;
                flex-wrap: wrap;
            -ms-flex-wrap: wrap;
    }
    /**
     * Vertically center any content nested inside of equal-height grid items.
     */
    .o-grid--equal-height--centered-content > .o-grid__item > * {
              -webkit-box-align: center;
            -webkit-align-items: center;
                 -ms-flex-align: center;
                    align-items: center;
               -webkit-box-pack: center;
        -webkit-justify-content: center;
                justify-content: center;
                  -ms-flex-pack: center;
    }
}

/**
 * Vertically align grid-items to the center
 */
@if $use-grid--center {
    .o-grid--center > .o-grid__item {
        vertical-align: middle;
    }
}

/**
 * Vertically align grid-items to the bottom
 */
@if $use-grid--bottom {
    .o-grid--bottom > .o-grid__item {
        vertical-align: bottom;
    }
}

/**
 * Reverse grid items on the horizontal axis.
 */
@if $use-grid--reverse {
    .o-grid--reverse {
        direction: rtl;
        text-align:left;

        > .o-grid__item {
            direction: ltr;
            text-align: left;
        }
    }
}

/**
 * Give grid items a vertical gutter that is equal to
 * whatever horizontal gutter is applied to the grid.
 */
@if $use-grid--matrix {
    .o-grid--matrix {
        margin-bottom: -$grid-gutter-width;
    }

    .o-grid--matrix > .o-grid__item {
        margin-bottom: $grid-gutter-width;
    }

    /** Increase vertical gutter for large horizontal gutters */
    @if $use-grid--gutter-lg {
        .o-grid--gutter-lg {
            margin-bottom: -$gutter-lg-width;
        }

        .o-grid--gutter-lg > .o-grid__item {
            margin-bottom: $gutter-lg-width;
        }
    }

    /** Decrease vertical gutter for small horizontal gutters */
    @if $use-grid--gutter-sm {
        .o-grid--gutter-sm {
            margin-bottom: -$gutter-sm-width;
        }

        .o-grid--gutter-sm > .o-grid__item {
            margin-bottom: $gutter-sm-width;
        }
    }

    /** Remove vertical gutter for zero horizontal gutters */
    @if $use-grid--no-gutter {
        .o-grid--no-gutter {
            margin-bottom: 0;
        }

        .o-grid--no-gutter > .o-grid__item {
            margin-bottom: 0;
        }
    }
}



/**
 * 1. Set display to relative to allow the push/pull classes to work
 *    which are using left/right positioning values.
 * 2. Necessary to combine fliud width grid-items with fixed width gutters. 
 * 3. Set display to inline-block.  Rather than floating block elements that
 *    you see on many other grid systems, inline-blocks have a number of
 *    benefits such as: 
 *    - No clearfixing issues.
 *    - Rows will tile nicely even if grid items are all different heights.  
 *    - You can vertically align grid items that are different heights.
 *    - You can horizontally align grid items, when total width is <100%
 *      using text-align on the parent 'grid' component.
 *    - You can reverse the order of the grid items by using `grid--reverse`
 *       which changes the direction property from right to left.
 * 4. Set default width of 100%.
 * 5. Prevent item from collapsing when empty.
 * 6. Create the gutter.
 * 7. When grid items are differing heights, align them to the top.
 * 8. Prevent grid-items from inhering text-align properties set
 *    One parent or ancestor nodes.
 * 9. Inject the base font-size.  The grid items cannot inherit font-size
 *    As the font-size on the parent `grid` component is set to zero to
 *    overcome whitespace issues when using inline-block.
 */
.o-grid__item {
    position: relative; /* [1] */
    -webkit-box-sizing: border-box;  /* [2] */
       -moz-box-sizing: border-box;  /* [2] */
            box-sizing: border-box;  /* [2] */
    display: inline-block; /* [3] */
    width: 100%; /* [4] */
    min-height: 1px; /* [5] */
    padding-left: $grid-gutter-width; /* [6] */
    vertical-align: top; /* [7] */
    text-align: left; /* |8] */
    font-size: $grid-font-size; /* [9] */
}

} /** Close @if `$use-grid` */

